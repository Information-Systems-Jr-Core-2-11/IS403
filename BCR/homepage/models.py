from django.db import models

# Create your models here.
class Organization(models.Model):
    organization_id  = models.AutoField(primary_key = True)
    company_name = models.CharField(max_length=100, null=True, blank=True)
    company_description = models.CharField(max_length = 8000, null=True, blank=True)
    email = models.CharField(max_length=320, null=True, blank=True)
    phone = models.CharField(max_length=50, null=True, blank=True)
    address = models.CharField(max_length=100, null=True, blank=True)
    city = models.CharField(max_length=50, null=True, blank=True)
    state = models.CharField(max_length=50, null=True, blank=True)
    sector = models.CharField(max_length=50, null=True, blank=True)
    size  = models.CharField(max_length=20, null=True, blank=True)
    video_link = models.URLField(null=True, blank=True)

    def __str__(self):
        return(self.company_name)

class Job(models.Model):
    job_id  = models.AutoField(primary_key = True)
    job_title  = models.CharField(max_length=200, null=True, blank=True)
    salary = models.DecimalField(max_digits=12,decimal_places=2, null=True, blank=True)
    apply_startDate  = models.DateField(null=True, blank=True)
    apply_endDate  = models.DateField(null=True, blank=True)
    job_startDate  = models.DateField(null=True, blank=True)
    job_location  = models.CharField(max_length=50, null=True, blank=True)
    job_description  = models.CharField(max_length=8000, null=True, blank=True)
    job_requirements  = models.CharField(max_length=8000, null=True, blank=True)
    relocation_package  = models.CharField(max_length=8000, null=True, blank=True)
    job_benefits  = models.CharField(max_length=8000, null=True, blank=True)
    Job_filled  = models.BooleanField(default="False", null=True, blank=True)
    organization_id = models.ForeignKey(Organization, on_delete=models.DO_NOTHING)

    def __str__(self):
        return(self.job_title)
class Applicant(models.Model):
    user_id  = models.AutoField(primary_key = True)
    password  = models.CharField(max_length=50, null=True, blank=True)
    first_name  = models.CharField(max_length=50, null=True, blank=True)
    last_name  = models.CharField(max_length=50, null=True, blank=True)
    desired_title  = models.CharField(max_length=50, null=True, blank=True)
    city  = models.CharField(max_length=50, null=True, blank=True)
    state  = models.CharField(max_length=50, null=True, blank=True)
    email = models.EmailField(max_length=320, null=True, blank=True)
    phone  = models.CharField(max_length=50, null=True, blank=True)
    video_link = models.URLField(null=True, blank=True)
    resume_upload  = models.FileField(null=True, blank=True)
    seeking_work = models.BooleanField(null=True, blank=True)

    def __str__(self):
        return(self.first_name + ' ' + self.last_name)

class Job_Offer(models.Model):
    job_id = models.ForeignKey(Job, on_delete=models.DO_NOTHING, unique=False)
    user_id = models.ForeignKey(Applicant, on_delete=models.DO_NOTHING)
    offer_date  = models.DateField(null=True, blank=True)

    class Meta: #CPK
        unique_together = ('job_id', 'user_id') # FIXME weird quotes

    def __str__(self):
        return(f"Job ID: {self.job_id}\nUser ID: {self.user_id}")

# This class does NOT have an autogenerated id
class Application_Status(models.Model):
    application_status_id = models.IntegerField(primary_key = True)
    status_name  = models.CharField(max_length=50, null=True, blank=True)

    def __str__(self):
        return(self.status_name)

class Job_Application(models.Model):
    user_id = models.ForeignKey(Applicant, on_delete=models.DO_NOTHING)
    job_id = models.ForeignKey(Job, on_delete=models.DO_NOTHING)
    application_date  = models.DateField(null=True, blank=True)
    application_status_id = models.ForeignKey(Application_Status, on_delete=models.DO_NOTHING)
    class Meta: #CPK
        unique_together = ('job_id', 'user_id')
    
    def __str__(self):
        return('Job Application object')
        




class Work_Experience(models.Model):
    work_exp_id  = models.AutoField(primary_key = True)
    job_title   = models.CharField(max_length=200, null=True, blank=True)
    company_name  = models.CharField(max_length=100, null=True, blank=True)
    startDate  = models.DateField(null=True, blank=True)
    endDate  = models.DateField(null=True, blank=True)
    experience_description  = models.CharField(max_length=8000, null=True, blank=True)
    user_id = models.ForeignKey(Applicant, on_delete=models.DO_NOTHING)

    def __str__(self):
        return(self.company_name)


class School_Experience(models.Model):
    school_exp_id  = models.AutoField(primary_key = True)
    major  = models.CharField(max_length=50, null=True, blank=True)
    minor  = models.CharField(max_length=50, null=True, blank=True)
    school_name  = models.CharField(max_length=100, null=True, blank=True)
    GPA = models.DecimalField(max_digits=10,decimal_places=2, null=True, blank=True)
    startDate  = models.DateField(null=True, blank=True)
    endDate  = models.DateField(null=True, blank=True)
    description  = models.CharField(max_length=8000, null=True, blank=True)
    user_id = models.ForeignKey(Applicant, on_delete=models.DO_NOTHING)
    def __str__(self):
        return(self.school_name)


class Skill(models.Model):
    skill_name = models.CharField(primary_key = True, max_length = 50)

    def __str__(self):
        return(self.skill_name)

class Applicant_Skill(models.Model):
    skill_name = models.ForeignKey(Skill, on_delete=models.DO_NOTHING)
    user_id = models.ForeignKey(Applicant, on_delete=models.DO_NOTHING)
    skill_level  = models.IntegerField(null=True, blank=True)
    class Meta: #CPK
        unique_together = ('skill_name', 'user_id')
        
    def __str__(self):
        return('Applicant Skill object')


class Job_Skill(models.Model):
    skill_name = models.ForeignKey(Skill, on_delete=models.DO_NOTHING)
    job_id = models.ForeignKey(Job, on_delete=models.DO_NOTHING)
    skill_level = models.IntegerField(null=True, blank=True)
    required = models.BooleanField(null=True, blank=True)
    class Meta: #CPK
        unique_together = ('skill_name', 'job_id')
        

    def __str__(self):
        return('job_skill object')